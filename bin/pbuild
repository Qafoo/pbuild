#!/bin/bash
####
# Copyright (c) 2011, Jakob Westhoff <jakob@westhoffswelt.de>
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#  - Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####

##
# Enable a stricter bash script processing to minimize errors in the code.
##
set -o nounset
set -o errexit


##
# Default configuration options if not overwritten by '/etc/pbuild'
##

BASE_DIR="$(readlink -f "$(dirname "$(readlink -f "$0")")/..")"

INSTALL_DIR="${BASE_DIR}"

APP_DIR="${BASE_DIR}/pbuild"

PBUILD_DIR="${APP_DIR}/pbuilds"
PACKAGE_DIR="${APP_DIR}/packages"
PHP_DIR="${APP_DIR}/php"

PHP_CONFIG_DIR="/etc/php"

SHARED_DIR="${BASE_DIR}/share/pbuild"
FUNCTIONS_DIR="${SHARED_DIR}/functions"

TEMP_DIR="/tmp"
BUILD_DIR="${TEMP_DIR}/pbuild/build"


MAKE_OPTS="-j2"


##
# Path of the config file which is capable of overriding all the above made
# configuration
##
CONFIG_FILE="/etc/pbuild"

##
# Variable holding the path to the processed pbuild file. As it is used by plog
# to identify the execution scope it needs to be initialized in order to not
# cause an error about an unset variable
##
PBUILD=""

##
# Print out an error to STDERR
#
# If the message is printed from within a dsl function show the line number as
# well as pbuild filename.
#
# Errors are considered fatal. After an error has been logged the execution of
# the whole application is stopped.
#
# @param message
##
perror() {
    local message="$@"

    if [ -z "${PBUILD}" ]; then
        echo "[!] ${message}" >&2
    else
        eval set -- $(caller 1)
        echo "[!] ${PBUILD}:${1}: ${message}" >&2
    fi

    exit 244
}

##
# Print some sort of log message
#
# @param message
##
plog() {
    local message="$@"
    echo "[>] ${message}" >&42
}

# Open the file descriptor with number 42 to point to stdout. This allows for
# logging from inside of functions with a return value.
exec 42>&1

##
# Ask the user a question and return his/her answer
#
# The second argument is optional. It specified a string containing all valid
# inputs. It can only be used if the questions answer is a one character
# string. For example a simply yes/no question (y/n). If the second argument is
# specified only one character answers matching the given characters are valid
# answers. Everything else will be rejected.
#
# If a one character check is done the given input is lowercased before checked
# against the allowed characters
#
# The third optional argument specifies a default value, which is used in case
# the user just presses the enter button without providing any input at all.
#
# @param question
# @param (allowed)
# @param (default)
##
pask() {
    local question="$1"

    local allowed=""
    if [ $# -gt 1 ]; then
        allowed="$2"
    fi

    local default=""
    if [ $# -gt 2 ]; then
        default="$3"
    fi

    local input=""

    local accepted=1
    while [ $accepted -ne 0 ]; do
        echo -n "[?] ${question} " >&42
        read input

        if [ -z "$input" ]; then
            input="${default}"
        fi

        if [ -z "$allowed" ]; then
            accepted=0
        else
            input="${input,,}"
            local allowedBoundary=${#allowed}
            let allowedBoundary=allowedBoundary-1
            local i=0            
            for i in $(seq 0 ${allowedBoundary}); do
                if [ "${allowed:$i:1}" = "${input}" ]; then
                    accepted=0
                    break
                fi
            done

            if [ $accepted -ne 0 ]; then
                plog "The given answer is invalid. Possible answers are: ${allowed}"
            fi
        fi
    done

    echo "${input}"
}

##
# Return the first of many arguments
#
# This function can be used to retrieve the first shell expansion from a list
# of multiple expansions
##
getFirstArgument() {
    echo "$1"
}

##
# Escape a given string in a way it can be safely used as part of regexp
# without containing any special meaning. (The regexp delimiters need to be @)
#
# @param string
# @return escaped string
##
escapeForRegexp() {
    echo "$@" | sed -e 's@\(\.\|\@\|\*\|\[\|\]\|\\\)@\\&@g'
}

##
# Make the given string relative to the given path
#
# To create a relative path the prefixing slash will be removed. Furthermore it
# will be checked if the string starts with the path (aka. is absolute) in this
# case the path prefix will be removed.
#
# The relative path must exist for this function to work.
#
# @param relative
# @param path
# @return path
##
makeRelativeTo() {
    local relative="$1"
    local path="$2"

    pushd "${relative}" >/dev/null
    
    local processed="$(readlink -m "${path}")"

    # If the target has been specified with a full path to the destination
    # remove this path prefix.
    processed="$(echo "${processed}"|sed -e "s@^$(escapeForRegexp "${relative}")@@")"

    # Remove any prefixed slash to ensure we are inside the target dir. This
    # may create strange subdir structures, but it will make sure we have
    # a somewhat relative path.
    processed="$(echo "${processed}"|sed -e 's@^/*@@')"

    popd >/dev/null

    echo "${processed}"
}

##
# Use the name of a pbuild file to initialize the needed build environment
#
# This functions sets the following global variables: PBUILD, PB, PN, PV, and
# PE
#
# PBUILD: full build path
# PB: name of the pbuild (without extension and path)
# PN: name of the "product" (usually php)
# PV: version string of the pbuild
# PE: extra buildname of the pbuild (everything that comes after a minus behind
#     the version string)
#
# @param pbuild
##
initializeEnvironmentByPbuild() {
    local pbuild="$1"

    local regexp='s@^\([^-]\+\)-\(\([0-9]\+\.\)*[0-9]\+\)-\?\(.*\)$@'

    PBUILD="$pbuild"

    PB=$(basename "${pbuild}" ".pbuild")

    PN="$(echo "$PB"|sed -e "${regexp}\\1@")"
    PV="$(echo "$PB"|sed -e "${regexp}\\2@")"
    PE="$(echo "$PB"|sed -e "${regexp}\\4@")"
}

##
# Import the configuration file if it does exist.
##
if [ -f "${CONFIG_FILE}" ]; then
    source "${CONFIG_FILE}"
fi

# Try to source all the needed functions and the base pbuild template
for file in "${FUNCTIONS_DIR}"/*; do
    source "${file}"
done

##
# Run the appropriate actions
##

## TODO: Commandline handling

initializeEnvironmentByPbuild "$(findpbuild "$1")"
plog "Using pbuild '${PBUILD}'"




# S="${BASE_DIR}/tmp/pkg"
# D="${BASE_DIR}/tmp/src"
# punpack "php-5.3.6.tar.bz2"
# PT="cli"
# PB="php-5.3.6"
# cd "${D}/php-5.3.6"
# pconfigure

# Close fd 42 again (We want to leave a clean env don't we? ;)
exec 42>&-
