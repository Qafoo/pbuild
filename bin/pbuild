#!/bin/bash
####
# Copyright (c) 2011, Jakob Westhoff <jakob@westhoffswelt.de>
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#  - Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
####
#
#@ pbuild 1.0 (c) Jakob Westhoff
#/ Usage: pbuild [-h] [<action>] [<pbuild-template>]
#/
#/ The following actions are available:
#/
#/ download:  Download the needed archive for the given pbuild
#/ compile:   Compile the given pbuild and store it's build result inside the
#/            packages directory
#/ install:   Install the given pbuild to the specified php directory
#/ enable:    Enable the given pbuild to be available to the system
#/ disable:   Disable the given pbuild again, removing all linked entries inside
#/            the system
#/ uninstall: Uninstall the version from the php directory
#/
#/ Default: enable
#/ If no action is specified the enable action is automatically assumed.
#/ 
#/ Most of those actions depend on each other and are therefore executed in
#/ a given order. (e.g. the enable action will automatically trigger download,
#/ compile and install as a prerequisite if necessary.) The pbuild system is
#/ capable of determining if certain steps need to be executed again or if all
#/ relevant information are available from a previous run.
#/
#/ pbuild-templates can either be addressed by their canonical path or simply
#/ by there name. A quite inteligent lookup system will try to find the one you
#/ have been looking for.
#/
#/ If neither an action nor a pbuild-template is specified a list of all
#/ available pbuilds from the pbuild directory is printed.
##

##
# Enable a stricter bash script processing to minimize errors in the code.
##
set -o nounset
set -o errexit


##
# Default configuration options if not overwritten by '/etc/pbuild'
##

BASE_DIR="$(readlink -f "$(dirname "$(readlink -f "$0")")/..")"

INSTALL_DIR="${BASE_DIR}"

APP_DIR="${BASE_DIR}/library"

PBUILD_DIR="${APP_DIR}/pbuilds"
PACKAGE_DIR="${APP_DIR}/packages"
BUILD_DIR="${APP_DIR}/build"
PHP_DIR="${APP_DIR}/php"

PHP_CONFIG_DIR="/etc/php"

SHARED_DIR="${BASE_DIR}/share/pbuild"
FUNCTIONS_DIR="${SHARED_DIR}/functions"
ACTIONS_DIR="${SHARED_DIR}/actions"

##
# Default makeopts specifying multiple processes to use
#
# Value may be overwritten by configuration of course
#
# On linux systems I can retrieve the cpuinfo procfs entry and isolate the
# number of cores. I don't know a simple way to do this on Mac OS X. If you
# know one, please contact me, or send a pull request.
##
MAKE_OPTS="-j2"
if [ -f "/proc/cpuinfo" ]; then
    MAKE_OPTS="$(cat /proc/cpuinfo | grep processor | wc -l)"
    let MAKE_OPTS="${MAKE_OPTS}"+1
    MAKE_OPTS="-j${MAKE_OPTS}"
fi

##
# Different incarnations of the package to be build
#
# The default is a cli version, plus an fpm-fcgi version.
# You may change this to your linking from within the config file if you want.
# simply provide a comma seperated list with incarnations to build.
#
# You may decide not to build the cli incarnation. This may lead however to
# quite strange problems, as the cli version is used for example to install
# pear packages and stuff.
#
# The order provided by this configuration determines the build and activation
# order as well. Therefore cli should always be put first, in order to be
# available for all later on relevant configuration and installation.
#
# Available incarnations are:
# - cli
# - fcgi
# - fpm
# - apxs
# - apxs2
##
BUILD_INCARNATIONS="cli fpm"

##
# Path of the config file which is capable of overriding all the above made
# configuration
##
CONFIG_FILE="/etc/pbuild"

##
# Variable holding the path to the processed pbuild file. As it is used by plog
# to identify the execution scope it needs to be initialized in order to not
# cause an error about an unset variable
##
PBUILD=""

# a subshell
##

# Print out an error to STDERR
#
# If the message is printed from within a dsl function show the line number as
# well as pbuild filename.
#
# Errors are considered fatal. After an error has been logged the execution of
# the whole application is stopped.
#
# @param message
##
perror() {
    local message="$@"

    if [ -z "${PBUILD}" ]; then
        echo "[!] ${message}" >&2
    else
        eval set -- $(caller 1)
        echo "[!] ${PBUILD}:${1}: ${message}" >&2
    fi

    exit 244
}

##
# Print some sort of log message
#
# @param message
##
plog() {
    local message="$@"
    echo "[>] ${message}" >&42
}

# Open the file descriptor with number 42 to point to stdout. This allows for
# logging from inside of functions with a return value.
exec 42>&1

##
# Ask the user a question and return his/her answer
#
# The second argument is optional. It specified a string containing all valid
# inputs. It can only be used if the questions answer is a one character
# string. For example a simply yes/no question (y/n). If the second argument is
# specified only one character answers matching the given characters are valid
# answers. Everything else will be rejected.
#
# If a one character check is done the given input is lowercased before checked
# against the allowed characters
#
# The third optional argument specifies a default value, which is used in case
# the user just presses the enter button without providing any input at all.
#
# @param question
# @param (allowed)
# @param (default)
##
pask() {
    local question="$1"

    local allowed=""
    if [ $# -gt 1 ]; then
        allowed="$2"
    fi

    local default=""
    if [ $# -gt 2 ]; then
        default="$3"
    fi

    local input=""

    local accepted=1
    while [ $accepted -ne 0 ]; do
        echo -n "[?] ${question} " >&42
        read input

        if [ -z "$input" ]; then
            input="${default}"
        fi

        if [ -z "$allowed" ]; then
            accepted=0
        else
            local allowedBoundary=${#allowed}
            let allowedBoundary=allowedBoundary-1
            local i=0            
            for i in $(seq 0 ${allowedBoundary}); do
                if [ "${allowed:$i:1}" = "${input}" ]; then
                    accepted=0
                    break
                fi
            done

            if [ $accepted -ne 0 ]; then
                plog "The given answer is invalid. Possible answers are: ${allowed}"
            fi
        fi
    done

    echo "${input}"
}

##
# Return the first of many arguments
#
# This function can be used to retrieve the first shell expansion from a list
# of multiple expansions
##
getFirstArgument() {
    echo "$1"
}

##
# Escape a given string in a way it can be safely used as part of regexp
# without containing any special meaning. (The regexp delimiters need to be @)
#
# @param string
# @return escaped string
##
escapeForRegexp() {
    echo "$@" | sed -e 's@\(\.\|\@\|\*\|\[\|\]\|\\\)@\\&@g'
}

##
# Make the given string relative to the given path
#
# To create a relative path the prefixing slash will be removed. Furthermore it
# will be checked if the string starts with the path (aka. is absolute) in this
# case the path prefix will be removed.
#
# The relative path must exist for this function to work.
#
# @param relative
# @param path
# @return path
##
makeRelativeTo() {
    local relative="$1"
    local path="$2"

    pushd "${relative}" >/dev/null
    
    local processed="$(readlink -m "${path}")"

    # If the target has been specified with a full path to the destination
    # remove this path prefix.
    processed="$(echo "${processed}"|sed -e "s@^$(escapeForRegexp "${relative}")@@")"

    # Remove any prefixed slash to ensure we are inside the target dir. This
    # may create strange subdir structures, but it will make sure we have
    # a somewhat relative path.
    processed="$(echo "${processed}"|sed -e 's@^/*@@')"

    popd >/dev/null

    echo "${processed}"
}

##
# Use the name of a pbuild file to initialize the needed build environment
#
# This functions sets the following global variables: PBUILD, PB, PN, PV, and
# PE
#
# PBUILD: full build path
# PB: name of the pbuild (without extension and path)
# PN: name of the "product" (usually php)
# PV: version string of the pbuild
# PE: extra buildname of the pbuild (everything that comes after a minus behind
#     the version string)
#
# @param pbuild
##
initializeEnvironmentForPbuild() {
    local pbuild="$1"

    local regexp='s@^\([^-]\+\)-\(\([0-9]\+\.\)*[0-9]\+\)-\?\(.*\)$@'

    PBUILD="$pbuild"

    PB=$(basename "${pbuild}" ".pbuild")

    PN="$(echo "$PB"|sed -e "${regexp}\\1@")"
    PV="$(echo "$PB"|sed -e "${regexp}\\2@")"
    PE="$(echo "$PB"|sed -e "${regexp}\\4@")"
}

##
# Show the program information
#
# Display program information of this utility extracted from the this files
# lines marked with '#@'. The idea for this is from Ryan Tomayko
# <tomayko.com/about>. Thanks for this nice way of doing it ;)
##
show_info() {
    grep '^#@' <"${0}" | cut -c4-
}
##
# Show the usage information and exit the script
#
# Display usage information of this utility extracted from the this files lines
# marked with '#/' and exit with errorcode 2. The idea for this is from Ryan
# Tomayko <tomayko.com/about>. Thanks for this nice way of doing it ;)
##
show_usage() {
    grep '^#/' <"${0}" | cut -c4-
    exit 2
}

##
# Import the configuration file if it does exist.
#
# This will overwrite all of the default configuration if there is a substitute
# inside the config file.
##
if [ -f "${CONFIG_FILE}" ]; then
    source "${CONFIG_FILE}"
fi

##
# Source all the needed template functions aswell as the base template
##
for file in "${FUNCTIONS_DIR}"/*; do
    source "${file}"
done

##
# Source all the needed action functions
##
for file in "${ACTIONS_DIR}"/*; do
    source "${file}"
done

##
# Handle commandline input
##
show_info

##
# Neither an action nor a pbuild has been specified
##
if [ "${#}" -lt 1 ]; then
    action_list
    exit 0
fi

##
# Scan for provided options
##
option=""
while getopts ":h" option; do
    case "${option}" in
        h)
            show_usage
        ;;
        \?)
            plog "Invalid option specified: -${OPTARG}"
            show_usage
        ;;
        :)
            plog "The option -${OPTARG} requires an argument, none given"
            show_usage
        ;;
    esac
done

# Remove all the parsed options from the arguments stack
shift "$((OPTIND-1))"

##
# Determine the selected action
##
# The default action
ACTION="enable"
case "${1}" in
    download|compile|install|enable|disable|uninstall)
        ACTION="${1}"
        shift 1
    ;;
    *)
        if [ "${#} -ge 2" ]; then
            plog "Invalid action '${1}' specified."
            show_usage
        fi
    ;;
esac

##
# Options and action are collected let's make sure there still is a pbuild
# specified.
##
if [ "${#}" -lt 1 ]; then
    plog "No pbuild file has been provided."
    show_usage
fi

plog "Requested action: ${ACTION}."
plog "Looking for requested pbuild template."

PBUILD="$(findpbuild "$1")"
if [ -z "${PBUILD}" ]; then
    exit 244
fi
plog "Using pbuild '${PBUILD}'."

##
# Determine needed possible dependencies for build
##
BUILD_ORDER="download compile install enable"
BUILD_ORDER_SINGLETON="disable uninstall"

if echo " ${BUILD_ORDER_SINGLETON} "|grep -q " ${ACTION} "; then
    # Singleton should be build. No dependency checking needed
    BUILD_DEPENDENCIES=""
else
    # Cut out all the needed steps until the requested build step is reached
    BUILD_DEPENDENCIES="$(echo " ${BUILD_ORDER} "|sed -e 's@ '"${ACTION}"' .*$@@'|sed -e 's@ \(.*\) $@\1@')"
fi
plog "The following build steps will be executed in order: ${BUILD_DEPENDENCIES} ${ACTION}"

##
# Build each incarnation
##
plog "The following incarnations will be build: ${BUILD_INCARNATIONS}."

for PT in ${BUILD_INCARNATIONS}; do
    ##
    # Determine and execute the needed build pipeline steps for the loaded pbuild
    ##
    source "${PBUILD}"
    initializeEnvironmentForPbuild "${PBUILD}"
    plog "Building ${PB}, incarnation ${PT}"

    ACTIVE_BUILD_STEP=""
    for ACTIVE_BUILD_STEP in ${BUILD_DEPENDENCIES}; do
        plog "Executing build action: ${ACTIVE_BUILD_STEP}"
        eval "if necessary_action_${ACTIVE_BUILD_STEP}; then action_${ACTIVE_BUILD_STEP}; else plog \"Action ${ACTIVE_BUILD_STEP} skipped due to previous work\"; fi"
    done
    eval "action_${ACTION}"
done


# Close fd 42 again (We want to leave a clean env don't we? ;)
exec 42>&-
